tipo -> INT
lista- >id arreglo
arreglo -> id arreglo
arreglo -> id arreglo
arreglo -> id arreglo
lista -> lista , id arreglo
tipo -> INT
lista- >id arreglo
lista -> lista , id arreglo
lista -> lista , id arreglo
lista -> lista , id arreglo
tipo -> CHAR
lista- >id arreglo
lista -> lista , id arreglo
lista -> lista , id arreglo
lista -> lista , id arreglo
tipo -> DOUBLE
lista- >id arreglo
lista -> lista , id arreglo
lista -> lista , id arreglo
lista -> lista , id arreglo
tipo -> INT
lista- >id arreglo
tipo -> INT
lista- >id arreglo
tipo -> CHAR
lista- >id arreglo
decl -> tipo lista PYC decl
decl -> tipo lista PYC decl
decl -> tipo lista PYC decl
tipo -> struct { decl }
lista- >id arreglo
tipo -> DOUBLE
lista- >id arreglo
decl -> tipo lista PYC decl
decl -> tipo lista PYC decl
decl -> tipo lista PYC decl
decl -> tipo lista PYC decl
decl -> tipo lista PYC decl
decl -> tipo lista PYC decl
tipo -> INT
tipo -> INT
lista_args -> tipo id parte_arr
argumentos -> lista_args
expresion -> num 1
sentencia -> return expresion ;
sentencias -> sentencia
tipo -> INT
tipo -> INT
lista_args -> tipo id parte_arr
tipo -> INT
lista_args -> lista_args , tipo id parte_arr
tipo -> INT
lista_args -> lista_args , tipo id parte_arr
argumentos -> lista_args
tipo -> INT
lista- >id arreglo
decl -> tipo lista PYC decl
parte_izq -> id
expresion -> num 2
sentencia -> parte_izq = expresion
sentencias -> sentencia
expresion -> num 2
rel->  <
expresion -> num 3
condicion -> expresion rel expresion 
expresion -> num 3
rel->  <
expresion -> num 4
condicion -> expresion rel expresion 
condicion -> condicion && condicion 
condicion -> ( condicion )
condicion -> ! condicion 
parte_izq -> id
expresion -> num 3
sentencia -> parte_izq = expresion
sentencias -> sentencias sentencia
expresion -> num 2
expresion -> num 3
expresion -> expresion + expresion 
parte_izq -> id
expresion -> num 0
sentencia -> parte_izq = expresion
sentencias -> sentencia
parte_izq -> id
expresion -> num 1
sentencia -> parte_izq = expresion
sentencias -> sentencia
casos : case : NUMERO sentencias casoscasos : case : NUMERO sentencias casosparte_izq -> id
expresion -> num -1
sentencia -> parte_izq = expresion
predeterm -> default : sentencia
sentencias -> sentencias sentencia
expresion -> num 3232
sentencia -> return expresion ;
sentencias -> sentencias sentencia
tipo -> INT
tipo -> INT
lista_args -> tipo id parte_arr
argumentos -> lista_args
tipo -> INT
lista- >id arreglo
decl -> tipo lista PYC decl
parte_izq -> id.id
expresion -> num 3
func 3lista_param -> expresion
expresion -> num 3
func 3lista_param -> lista_param , expresion
expresion -> num 0
func 0lista_param -> lista_param , expresion
parametros-> lista_param
expresion -> id _foo ( parametros )
sentencia -> parte_izq = expresion
sentencias -> sentencia
parte_izq -> id.id
expresion -> id ent ( parametros )
sentencia -> parte_izq = expresion
sentencias -> sentencias sentencia
parte_izq -> id
expresion -> num 9
sentencia -> parte_izq = expresion
sentencias -> sentencias sentencia
funciones -> fun tipo id ( argumentos ) { decl sentencias } funciones
funciones -> fun tipo id ( argumentos ) { decl sentencias } funciones
funciones -> fun tipo id ( argumentos ) { decl sentencias } funciones
programa -> decl funciones
