tipo -> DOUBLE
lista- >id arreglo
lista -> lista , id arreglo
lista -> lista , id arreglo
tipo -> DOUBLE
lista- >id arreglo
tipo -> INT
lista- >id arreglo
tipo -> INT
lista- >id arreglo
tipo -> INT
lista- >id arreglo
tipo -> INT
lista- >id arreglo
decl -> tipo lista PYC decl
decl -> tipo lista PYC decl
decl -> tipo lista PYC decl
decl -> tipo lista PYC decl
tipo -> struct { decl }
lista- >id arreglo
lista -> lista , id arreglo
lista -> lista , id arreglo
tipo -> DOUBLE
lista- >id arreglo
tipo -> DOUBLE
lista- >id arreglo
decl -> tipo lista PYC decl
decl -> tipo lista PYC decl
decl -> tipo lista PYC decl
decl -> tipo lista PYC decl
decl -> tipo lista PYC decl
tipo -> DOUBLE
expresion -> id a ( parametros )
sentencia -> return expresion ;
sentencias -> sentencia
tipo -> INT
tipo -> INT
lista_args -> tipo id parte_arr
argumentos -> lista_args
tipo -> INT
lista- >id arreglo
tipo -> DOUBLE
lista- >id arreglo
decl -> tipo lista PYC decl
decl -> tipo lista PYC decl
expresion -> id i ( parametros )
rel->  <
expresion -> id n ( parametros )
condicion -> expresion rel expresion 
parte_izq -> id
expresion -> id a ( parametros )
expresion -> id b ( parametros )
expresion -> expresion + expresion 
expresion -> id c ( parametros )
expresion -> expresion + expresion 
sentencia -> parte_izq = expresion ;
sentencias -> sentencia
parte_izq -> id
expresion -> id i ( parametros )
expresion -> num 1
expresion -> expresion + expresion 
sentencia -> parte_izq = expresion ;
sentencias -> sentencias sentencia
expresion -> num 1
sentencia -> print expresion ;
sentencias -> sentencias sentencia
sentencia -> { sentencias }
sentencia -> while ( condicion) sentencia;
sentencias -> sentencia
expresion -> id suma ( parametros )
sentencia -> return expresion ;
sentencias -> sentencias sentencia
tipo -> INT
tipo -> DOUBLE
lista- >id arreglo
tipo -> CHAR
arreglo -> id arreglo
lista- >id arreglo
tipo -> INT
arreglo -> id arreglo
arreglo -> id arreglo
arreglo -> id arreglo
lista- >id arreglo
decl -> tipo lista PYC decl
decl -> tipo lista PYC decl
decl -> tipo lista PYC decl
parte_izq -> id.id
expresion -> num 255
sentencia -> parte_izq = expresion ;
sentencias -> sentencia
parte_izq -> id
expresion -> num 2
sentencia -> parte_izq = expresion ;
sentencias -> sentencias sentencia
parte_izq -> id
expresion -> num 3
sentencia -> parte_izq = expresion ;
sentencias -> sentencias sentencia
parte_izq -> id
expresion -> num 4
sentencia -> parte_izq = expresion ;
sentencias -> sentencias sentencia
parte_izq -> id
expresion -> id suma_args ( parametros )
func t8lista_param -> expresion
parametros-> lista_param
expresion -> id iterar_while ( parametros )
sentencia -> parte_izq = expresion ;
sentencias -> sentencias sentencia
expresion -> num 0
var_arreglo -> id [ expresion ] 
expresion -> num 1
var_arreglo -> var arreglo [ expresion ]
expresion -> num 1
var_arreglo -> var arreglo [ expresion ]
parte_izq -> var_arreglo
expresion -> num 1
sentencia -> parte_izq = expresion ;
sentencias -> sentencias sentencia
expresion -> num 0
var_arreglo -> id [ expresion ] 
expresion -> num 2
var_arreglo -> var arreglo [ expresion ]
expresion -> num 1
var_arreglo -> var arreglo [ expresion ]
parte_izq -> var_arreglo
expresion -> num 6
var_arreglo -> id [ expresion ] 
expresion -> num 5
var_arreglo -> var arreglo [ expresion ]
expresion -> num 0
var_arreglo -> var arreglo [ expresion ]
expresion -> var_arreglo
sentencia -> parte_izq = expresion ;
sentencias -> sentencias sentencia
expresion -> id a ( parametros )
sentencia -> print expresion ;
sentencias -> sentencias sentencia
tipo -> VOID
sentencia -> return ;
sentencias -> sentencia
tipo -> VOID
tipo -> INT
lista- >id arreglo
decl -> tipo lista PYC decl
sentencia -> return ;
sentencias -> sentencia
funciones -> fun tipo id ( argumentos ) { decl sentencias } funciones
funciones -> fun tipo id ( argumentos ) { decl sentencias } funciones
funciones -> fun tipo id ( argumentos ) { decl sentencias } funciones
funciones -> fun tipo id ( argumentos ) { decl sentencias } funciones
funciones -> fun tipo id ( argumentos ) { decl sentencias } funciones
programa -> decl funciones
